Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from spin_ham import TF_Ising_1d
J=1; h=0.2; 
# n = 8; 
t = 0.5
r = 5
# n_list = np.linspace(4, 500, 20, dtype=int)
n_list = [4, 5, 6, 7, 8, 9, 10, 12, 14,  18,  24,  30,  40,  54,  70,  94, 124, 164, 216, 286, 378, 500]
n_list_emp = range(4, 10)
data = {'error_xyz': [], 'error_parity': [], 'error_standard': [], 'error_xyz_emp': [], 'error_parity_emp': []}
print(f"J={J}, h={h}, t={t}, r={r}")
for n in n_list:
    error_xyz = analy_st_loose_bound(r, n, J, h, t, group='xyz')
    error_standard = analy_st_loose_bound(r, n, J, h, t, group='parity')
    error_parity = analy_lc_bound(r, n, J, h, t, ob_type='multi')
    data['error_xyz'].append(error_xyz)
    data['error_standard'].append(error_standard)
    data['error_parity'].append(error_parity)
    # print(f"n={n}, empirical error_xyz={error_xyz}, empirical error_parity={error_parity}")  

def ob_error(ob, exact_U, appro_U):
    exact_ob = exact_U.conj().T @ ob @ exact_U 
    appro_ob = appro_U.conj().T @ ob @ appro_U
    # ob_error = np.linalg.norm(exact_ob - appro_ob, ord=2)
    ob_error = np.sort(abs(np.linalg.eigvalsh(exact_ob - appro_ob)))[-1]
    print('ob error (operator norm, largest eigen): ', ob_error, '; r:', r, '; t:', t)
    return ob_error

for n in n_list_emp:
    tfI = TF_Ising_1d(n, J, h)
    exact_U = expm(-1j * t * tfI.ham.to_matrix())
    appro_U_xyz = pf_r([h.to_matrix(True) for h in tfI.ham_xyz], t, r, use_jax=False)
    # appro_U_xyz = standard_trotter([h.to_matrix(True) for h in tfI.ham_xyz], t, r)
    appro_U_parity = pf_r([h.to_matrix(True) for h in tfI.ham_parity], t, r, use_jax=False)
    magn_op = SparsePauliOp.from_sparse_list([('Z', [i], 1) for i in range(0, n)], n)/n
    # z_op = SparsePauliOp.from_sparse_list([('Z', [0], 1)], n)
    error_xyz = ob_error(magn_op.to_matrix(), exact_U, appro_U_xyz)
    error_parity = ob_error(magn_op.to_matrix(), exact_U, appro_U_parity)
    data['error_xyz_emp'].append(error_xyz)
    data['error_parity_emp'].append(error_parity)
    print(f"n={n}, empirical error_xyz={error_xyz:.6f}, empirical error_parity={error_parity:.6f}")  

fig, ax = plt.subplots(figsize=(8, 6), layout='tight')
ax.plot(n_list, data['error_xyz'], 's--', color='#00A087FF', label='XZ (Worst case)')
ax.plot(n_list, data['error_standard'], 's--', color='#F39B7FFF', label='Parity (Worst case)')
ax.plot(n_list, data['error_parity'], '^--', color='#F39B7FFF', label='Chromatic (Theoretical)')
ax.plot(n_list_emp, data['error_xyz_emp'], 'o-', color='#00A087FF', label='XZ (Empirical)')
ax.plot(n_list_emp, data['error_parity_emp'], 'o-', color='#F39B7FFF', label='Parity (Empirical)')
ax.loglog()
ax.set_xlabel(rf'Number of qubits $n$')
# ax.set_title(f't={t}, r={r}')
# ax.set_yscale('log')
ax.grid()
ax.set_ylabel('Multi-observable error')
ax.legend() 
fig.savefig(f'./figs/grouping_TFI1d_n={n}_Multi_t={t}.pdf', bbox_inches='tight')
------------------

----- stdout -----
J=1, h=0.2, t=0.5, r=5
ob error (operator norm, largest eigen):  0.0006050279016702327 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0003890797716265801 ; r: 5 ; t: 0.5
n=4, empirical error_xyz=0.000605, empirical error_parity=0.000389
ob error (operator norm, largest eigen):  0.0006461088136168175 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0004722297915785203 ; r: 5 ; t: 0.5
n=5, empirical error_xyz=0.000646, empirical error_parity=0.000472
ob error (operator norm, largest eigen):  0.0006683464066081828 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0004518195344625213 ; r: 5 ; t: 0.5
n=6, empirical error_xyz=0.000668, empirical error_parity=0.000452
ob error (operator norm, largest eigen):  0.0006868572656431326 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0005011031698569969 ; r: 5 ; t: 0.5
n=7, empirical error_xyz=0.000687, empirical error_parity=0.000501
----- stdout -----
ob error (operator norm, largest eigen):  0.0006991156194007036 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0004826435583458283 ; r: 5 ; t: 0.5
n=8, empirical error_xyz=0.000699, empirical error_parity=0.000483
----- stdout -----
ob error (operator norm, largest eigen):  0.0007097440307529388 ; r: 5 ; t: 0.5
ob error (operator norm, largest eigen):  0.0005171085685895365 ; r: 5 ; t: 0.5
n=9, empirical error_xyz=0.000710, empirical error_parity=0.000517
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[2], line 55[0m
[1;32m     53[0m ax[38;5;241m.[39mset_ylabel([38;5;124m'[39m[38;5;124mMulti-observable error[39m[38;5;124m'[39m)
[1;32m     54[0m ax[38;5;241m.[39mlegend() 
[0;32m---> 55[0m [43mfig[49m[38;5;241;43m.[39;49m[43msavefig[49m[43m([49m[38;5;124;43mf[39;49m[38;5;124;43m'[39;49m[38;5;124;43m./figs/grouping_TFI1d_n=[39;49m[38;5;132;43;01m{[39;49;00m[43mn[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m_Multi_t=[39;49m[38;5;132;43;01m{[39;49;00m[43mt[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m.pdf[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mbbox_inches[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mtight[39;49m[38;5;124;43m'[39;49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/figure.py:3390[0m, in [0;36mFigure.savefig[0;34m(self, fname, transparent, **kwargs)[0m
[1;32m   3388[0m     [38;5;28;01mfor[39;00m ax [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39maxes:
[1;32m   3389[0m         _recursively_make_axes_transparent(stack, ax)
[0;32m-> 3390[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcanvas[49m[38;5;241;43m.[39;49m[43mprint_figure[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/backend_bases.py:2193[0m, in [0;36mFigureCanvasBase.print_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)[0m
[1;32m   2189[0m [38;5;28;01mtry[39;00m:
[1;32m   2190[0m     [38;5;66;03m# _get_renderer may change the figure dpi (as vector formats[39;00m
[1;32m   2191[0m     [38;5;66;03m# force the figure dpi to 72), so we need to set it again here.[39;00m
[1;32m   2192[0m     [38;5;28;01mwith[39;00m cbook[38;5;241m.[39m_setattr_cm([38;5;28mself[39m[38;5;241m.[39mfigure, dpi[38;5;241m=[39mdpi):
[0;32m-> 2193[0m         result [38;5;241m=[39m [43mprint_method[49m[43m([49m
[1;32m   2194[0m [43m            [49m[43mfilename[49m[43m,[49m
[1;32m   2195[0m [43m            [49m[43mfacecolor[49m[38;5;241;43m=[39;49m[43mfacecolor[49m[43m,[49m
[1;32m   2196[0m [43m            [49m[43medgecolor[49m[38;5;241;43m=[39;49m[43medgecolor[49m[43m,[49m
[1;32m   2197[0m [43m            [49m[43morientation[49m[38;5;241;43m=[39;49m[43morientation[49m[43m,[49m
[1;32m   2198[0m [43m            [49m[43mbbox_inches_restore[49m[38;5;241;43m=[39;49m[43m_bbox_inches_restore[49m[43m,[49m
[1;32m   2199[0m [43m            [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   2200[0m [38;5;28;01mfinally[39;00m:
[1;32m   2201[0m     [38;5;28;01mif[39;00m bbox_inches [38;5;129;01mand[39;00m restore_bbox:

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/backend_bases.py:2043[0m, in [0;36mFigureCanvasBase._switch_canvas_and_return_print_method.<locals>.<lambda>[0;34m(*args, **kwargs)[0m
[1;32m   2039[0m     optional_kws [38;5;241m=[39m {  [38;5;66;03m# Passed by print_figure for other renderers.[39;00m
[1;32m   2040[0m         [38;5;124m"[39m[38;5;124mdpi[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mfacecolor[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124medgecolor[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124morientation[39m[38;5;124m"[39m,
[1;32m   2041[0m         [38;5;124m"[39m[38;5;124mbbox_inches_restore[39m[38;5;124m"[39m}
[1;32m   2042[0m     skip [38;5;241m=[39m optional_kws [38;5;241m-[39m {[38;5;241m*[39minspect[38;5;241m.[39msignature(meth)[38;5;241m.[39mparameters}
[0;32m-> 2043[0m     print_method [38;5;241m=[39m functools[38;5;241m.[39mwraps(meth)([38;5;28;01mlambda[39;00m [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs: [43mmeth[49m[43m([49m
[1;32m   2044[0m [43m        [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43m{[49m[43mk[49m[43m:[49m[43m [49m[43mv[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mk[49m[43m,[49m[43m [49m[43mv[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mkwargs[49m[38;5;241;43m.[39;49m[43mitems[49m[43m([49m[43m)[49m[43m [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mk[49m[43m [49m[38;5;129;43;01mnot[39;49;00m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mskip[49m[43m}[49m[43m)[49m)
[1;32m   2045[0m [38;5;28;01melse[39;00m:  [38;5;66;03m# Let third-parties do as they see fit.[39;00m
[1;32m   2046[0m     print_method [38;5;241m=[39m meth

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/backends/backend_pdf.py:2800[0m, in [0;36mFigureCanvasPdf.print_pdf[0;34m(self, filename, bbox_inches_restore, metadata)[0m
[1;32m   2798[0m     file [38;5;241m=[39m filename[38;5;241m.[39m_ensure_file()
[1;32m   2799[0m [38;5;28;01melse[39;00m:
[0;32m-> 2800[0m     file [38;5;241m=[39m [43mPdfFile[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[43mmetadata[49m[38;5;241;43m=[39;49m[43mmetadata[49m[43m)[49m
[1;32m   2801[0m [38;5;28;01mtry[39;00m:
[1;32m   2802[0m     file[38;5;241m.[39mnewPage(width, height)

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/backends/backend_pdf.py:688[0m, in [0;36mPdfFile.__init__[0;34m(self, filename, metadata)[0m
[1;32m    686[0m [38;5;28mself[39m[38;5;241m.[39moriginal_file_like [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m    687[0m [38;5;28mself[39m[38;5;241m.[39mtell_base [38;5;241m=[39m [38;5;241m0[39m
[0;32m--> 688[0m fh, opened [38;5;241m=[39m [43mcbook[49m[38;5;241;43m.[39;49m[43mto_filehandle[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mwb[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mreturn_opened[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m    689[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m opened:
[1;32m    690[0m     [38;5;28;01mtry[39;00m:

File [0;32m/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/matplotlib/cbook.py:483[0m, in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    481[0m         fh [38;5;241m=[39m bz2[38;5;241m.[39mBZ2File(fname, flag)
[1;32m    482[0m     [38;5;28;01melse[39;00m:
[0;32m--> 483[0m         fh [38;5;241m=[39m [38;5;28;43mopen[39;49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43mflag[49m[43m,[49m[43m [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m)[49m
[1;32m    484[0m     opened [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m    485[0m [38;5;28;01melif[39;00m [38;5;28mhasattr[39m(fname, [38;5;124m'[39m[38;5;124mseek[39m[38;5;124m'[39m):

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: './figs/grouping_TFI1d_n=9_Multi_t=0.5.pdf'

